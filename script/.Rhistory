import numpy as np
import os
import os.path
import feather
import altair as alt
reticulate::repl_python()
from docopt import docopt
import pandas as pd
import numpy as np
import os
import os.path
import feather
import altair as alt
import altair
reticulate::repl_python()
import altair as al
import altair as alt
q()
exit
library(feather)
library(tidyverse)
library(caret)
library(docopt)
library(ggridges)
library(ggthemes)
theme_set(theme_minimal())
getwd()
read_feather("result/train_df.feather")
library(feather)
read_feather("result/train_df.feather")
train_data <- read_feather("result/train_df.feather")
str(train_data)
str_df <- str(train_data)
write_feather(str_df, "result/str_df.feather")
library(reshape2)
melt(train_data)
reticulate::repl_python()
import altair as alt
train_df = pd.read_feather(
"result/train_df.feather"
)
from docopt import docopt
import pandas as pd
import numpy as np
import os
import os.path
import feather
import altair as alt
train_df = pd.read_feather("result/train_df.feather")
train_df["Social drinker"] = train_df["Social drinker"].astype("numeric")
train_df["Social drinker"] = train_df["Social drinker"].astype("int64")
train_df_copy = train_df.copy()
train_df_copy = train_df.copy()
train_df
reticulate::repl_python()
from docopt import docopt
import pandas as pd
import numpy as np
import os
import os.path
import feather
import altair as alt
train_df = pd.read_feather("result/train_df.feather")
info = train_df.info()
feather.write_dataframe(info, "result/info_df.feather")
type(info)
pd.DataFrame(info)
pd.read_feather("result/info_df.feather")
train_df
train_df_copy = train_df.copy()
train_df_copy['Social drinker'] = train_df_copy['Social drinker'].astype('int64')
train_df_copy['Social smoker'] = train_df_copy['Social smoker'].astype('int64')
train_df_copy['Disciplinary failure'] = train_df_copy['Disciplinary failure'].astype('int64')
train_df_copy['Seasons'] = train_df_copy['Seasons'].astype('int64')
train_df_copy['Education'] = train_df_copy['Education'].astype('int64')
train_df_copy['Month of absence'] = train_df_copy['Month of absence'].astype('int64')
train_df_copy['Reason for absence'] = train_df_copy['Reason for absence'].astype('int64')
corr_df = train_df_copy.corr().stack().reset_index(name='corr')
corr_matrix = alt.Chart(corr_df).mark_rect().encode(
x=alt.X('level_0', title=None),
y=alt.Y('level_1', title=None),
color=alt.Color('corr', scale=alt.Scale(domain=(-1, 1), scheme='purpleorange'))
).properties(width=600, height=600)
corr_matrix
corr_matrix.save("result/corr.png")
corr_matrix.save("result/corr.png")
from docopt import docopt
import pandas as pd
import numpy as np
import os
import os.path
import feather
import altair as alt
reticulate::repl_python()
from docopt import docopt
import pandas as pd
import numpy as np
import os
import os.path
import feather
import altair as alt
train_df = pd.read_feather("result/train_df.feather")
train_df_copy = train_df.copy()
train_df_copy['Social drinker'] = train_df_copy['Social drinker'].astype('int64')
train_df_copy['Social smoker'] = train_df_copy['Social smoker'].astype('int64')
train_df_copy['Disciplinary failure'] = train_df_copy['Disciplinary failure'].astype('int64')
train_df_copy['Seasons'] = train_df_copy['Seasons'].astype('int64')
train_df_copy['Education'] = train_df_copy['Education'].astype('int64')
train_df_copy['Month of absence'] = train_df_copy['Month of absence'].astype('int64')
train_df_copy['Reason for absence'] = train_df_copy['Reason for absence'].astype('int64')
corr_df = train_df_copy.corr().stack().reset_index(name='corr')
corr_matrix = alt.Chart(corr_df).mark_rect().encode(
x=alt.X('level_0', title=None),
y=alt.Y('level_1', title=None),
color=alt.Color('corr', scale=alt.Scale(domain=(-1, 1), scheme='purpleorange'))
).properties(width=600, height=600)
corr_matrix.save("result/plot.png")
stderr
from altair_saver import save
corr_matrix.save("result/plot.png")
save(corr_matrix, "result/plot.png")
from altair_saver import save as alts
alts.save(corr_matrix, "result/plot.png")
altair_saver.save(corr_matrix, "plog.png")
import altair_saver
altair_saver.save(corr_matrix, "plot.png")
stderr
global stderr
stderr
save(corr_matrix, "plot.jpg")
exit
train_df
library(feather)
library(tidyverse)
library(caret)
library(docopt)
library(ggthemes)
theme_set(theme_minimal())
library(reshape2)
library(ggplot2)
train_data <- read_feather("result/train_df.feather")
train_data_copy <- train_data %>%
clean_names()
library(janitor)
train_data_copy <- train_data %>%
clean_names()
train_data_copy
train_data_copy <- train_data %>%
#clean_names() %>%
mutate(`Social drinker` = as.factor('Social drinker'))
train_data_copy
train_data_copy <- train_data %>%
#clean_names() %>%
mutate(`Social drinker` = as.factor('Social drinker')) %>%
mutate(`Social smoker` = as.factor('Social smoker')) %>%
mutate(`Disciplinary failure` = as.factor('Disciplinary failure')) %>%
mutate(`Seasons` = as.factor('Seasons')) %>%
mutate(`Education` = as.factor('Education')) %>%
mutate(`Month of absence` = as.factor('Month of absence')) %>%
mutate(`Reason for absence` = as.factor('Reason for absence'))
melt(train_data_copy)
train_data_copy
train_data_copy <- train_data %>%
#clean_names() %>%
mutate(`Social drinker` = as.double('Social drinker')) %>%
mutate(`Social smoker` = as.double('Social smoker')) %>%
mutate(`Disciplinary failure` = as.double('Disciplinary failure')) %>%
mutate(`Seasons` = as.double('Seasons')) %>%
mutate(`Education` = as.double('Education')) %>%
mutate(`Month of absence` = as.double('Month of absence')) %>%
mutate(`Reason for absence` = as.double('Reason for absence'))
warnings()
train_data_copy
train_data_copy <- train_data %>%
#clean_names() %>%
mutate(`Social drinker` = as.factor('Social drinker')) %>%
mutate(`Social smoker` = as.factor('Social smoker')) %>%
mutate(`Disciplinary failure` = as.factor('Disciplinary failure')) %>%
mutate(`Seasons` = as.factor('Seasons')) %>%
mutate(`Education` = as.factor('Education')) %>%
mutate(`Month of absence` = as.factor('Month of absence')) %>%
mutate(`Reason for absence` = as.factor('Reason for absence'))
train_data_copy
train_data
train_data_copy$`Disciplinary failure`
melt(train_data, id.vars = 'ID')
train_data
train_data %>% drop("ID")
train_data %>% drop(column = 'ID')
train_data_copy %>% train_data[-'ID']
train_data_copy %>% train_data[-c('ID')]
train_data_copy %>% train_data[-c(1)]
train_data_copy %>% select(-'ID')
train_data_copy <- train_data %>% select(-'ID')
melt(train_data_copy, id.vars = 'Absenteeism time in hours')
melt_df <- melt(train_data_copy, id.vars = 'Absenteeism time in hours')
ggplot(melt_df, aes(x='Absenteeism time in hours', y=variable, fill=value)) + geom_tile()
try_data <- read_csv("data/Absenteeism_at_work.csv")
melt_try <- melt(try_data)
melt_try
try_data
try_data <- as.factor(try_data)
try_data
melt_try <- melt(try_data)
melt_try
reticulate::repl_python()
import seaborn
import seaborn
from docopt import docopt
import pandas as pd
import numpy as np
import os
import os.path
import feather
import altair as alt
train_df
train_df_copy = train_df.copy()
train_df_copy['Social drinker'] = train_df_copy['Social drinker'].astype('int64')
train_df_copy['Social smoker'] = train_df_copy['Social smoker'].astype('int64')
train_df_copy['Disciplinary failure'] = train_df_copy['Disciplinary failure'].astype('int64')
train_df_copy['Seasons'] = train_df_copy['Seasons'].astype('int64')
train_df_copy['Education'] = train_df_copy['Education'].astype('int64')
train_df_copy['Month of absence'] = train_df_copy['Month of absence'].astype('int64')
train_df_copy['Reason for absence'] = train_df_copy['Reason for absence'].astype('int64')
corr_df = train_df_copy.corr()
seaborn.heatmap(corr_df, annot = True)
plt.show()
import matplotlib.pyplot as plt
plt.show()
seaborn.heatmap(corr_df, annot = False)
plt.show()
corr_df
exit
train_data
train_data_copy
cor(train_data_copy)
library(ggcorrplot)
library(feather)
library(tidyverse)
library(caret)
library(docopt)
library(ggthemes)
theme_set(theme_minimal())
library(reshape2)
library(ggplot2)
library(janitor)
library(dplyr)
library(ggcorrplot)
train_data <- read_feather("result/train_df.feather")
train_data_copy <- train_data
train_data_copy['Social drinker'] <- lapply(train_data_copy['Social drinker'], as.numeric)
train_data_copy['Social smoker'] <- lapply(train_data_copy['Social smoker'], as.numeric)
train_data_copy['Disciplinary failure'] <- lapply(train_data_copy['Disciplinary failure'], as.numeric)
train_data_copy$Education <- as.numeric(as.character(train_data_copy$Education))
train_data_copy$Seasons <- as.numeric(as.character(train_data_copy$Seasons))
train_data_copy$`Month of absence` <- as.numeric(as.character(train_data_copy$`Month of absence`))
train_data_copy$`Reason for absence` <- as.numeric(as.character(train_data_copy$`Reason for absence`))
corr_matrix <- train_data_copy %>%
select(-ID) %>%
cor() %>%
ggcorrplot() +
theme(text =  element_text(size = 18))
corr_matrix
train_data_copy %>%
select(-ID) %>%
cor() %>%
ggcorrplot() +
theme(text =  element_text(size = 12))
corr_matrix <- train_data_copy %>%
select(-ID) %>%
cor() %>%
ggcorrplot() +
theme(text =  element_text(size = 15))
# save the correlation matrix plot
ggsave(paste0(out_dir, "/correlation_matrix.png"),
corr_matrix,
width = 20,
height = 20)
ggsave(paste0("result", "/correlation_matrix.png"),
corr_matrix,
width = 20,
height = 20)
corr_matrix <- train_data_copy %>%
select(-ID) %>%
cor() %>%
ggcorrplot() +
theme(text =  element_text(size = 20))
ggsave(paste0("result", "/correlation_matrix.png"),
corr_matrix,
width = 20,
height = 20)
ggsave(paste0("result", "/correlation_matrix.png"),
corr_matrix,
width = 10,
height = 10)
train_data_copy %>%
select(-ID) %>%
pivot_longer(everything()) %>%
ggplot(aes(x=value)) +
geom_histogram(bins = 50, fill = "blue") +
facet_wrap(~name, ncol = 4, scales = 'free') +
theme(text =  element_text(size = 20))
train_data_copy %>%
select(-ID) %>%
pivot_longer(everything()) %>%
ggplot(aes(x=value)) +
geom_histogram(bins = 50, fill = "blue") +
facet_wrap(~name, ncol = 4, scales = 'free') +
theme(text =  element_text(size = 18))
train_data_copy %>%
select(-ID) %>%
pivot_longer(everything()) %>%
ggplot(aes(x=value)) +
geom_histogram(bins = 50, fill = "blue") +
facet_wrap(~name, ncol = 4, scales = 'free') +
theme(text =  element_text(size = 15))
train_data_copy %>%
select(-ID) %>%
pivot_longer(everything()) %>%
ggplot(aes(x=value)) +
geom_histogram(bins = 50, fill = "blue") +
facet_wrap(~name, ncol = 4, scales = 'free') +
theme(text =  element_text(size = 10))
train_data_copy %>%
select(-ID) %>%
pivot_longer(everything()) %>%
ggplot(aes(x=value)) +
geom_histogram(bins = 50, fill = "blue") +
facet_wrap(~name, ncol = 4, scales = 'free') +
theme(text =  element_text(size = 12))
dist_plot <- train_data_copy %>%
select(-ID) %>%
pivot_longer(everything()) %>%
ggplot(aes(x=value)) +
geom_histogram(bins = 50, fill = "blue") +
facet_wrap(~name, ncol = 4, scales = 'free') +
theme(text =  element_text(size = 12))
ggsave(paste0("result", "/distribution_plot.png"),
dist_plot,
width = 10,
height = 10)
ggsave(paste0("result", "/distribution_plot.png"),
dist_plot,
width = 12,
height = 12)
ggsave(paste0("result", "/distribution_plot.png"),
dist_plot,
width = 8,
height = 8)
ggsave(paste0("result", "/distribution_plot.png"),
dist_plot,
width = 10,
height = 10)
ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 20))
reason_list = list(
'0' = 'Unknown',
'1' = 'Certain infectious and parasitic diseases',
'2' = 'Neoplasms',
'3' = 'Diseases of the blood and blood-forming organs and certain disorders involving the immune mechanism',
'4' = 'Endocrine, nutritional and metabolic diseases',
'5' = 'Mental and behavioural disorders',
'6' = 'Diseases of the nervous system',
'7' = 'Diseases of the eye and adnexa',
'8' = 'Diseases of the ear and mastoid process',
'9' = 'Diseases of the circulatory system',
'10' = 'Diseases of the respiratory system',
'11' = 'Diseases of the digestive system',
'12' = 'Diseases of the skin and subcutaneous tissue',
'13' = 'Diseases of the musculoskeletal system and connective tissue',
'14' = 'Diseases of the genitourinary system',
'15' = 'Pregnancy, childbirth and the puerperium',
'16' = 'Certain conditions originating in the perinatal period',
'17' = 'Congenital malformations, deformations and chromosomal abnormalities',
'18' = 'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified',
'19' = 'Injury, poisoning and certain other consequences of external causes',
'20' = 'External causes of morbidity and mortality',
'21' = 'Factors influencing health status and contact with health services',
'22' = 'Patient follow-up',
'23' = 'Medical consultation',
'24' = 'Blood donation',
'25' = 'Laboratory examination',
'26' = 'Unjustified absence',
'27' = 'Physiotherapy',
'28' = 'Dental consultation'
)
train_data_copy <- rename(train_data_copy, reason_for_absence = 'Reason for absence')
count_df <- train_data_copy %>%
group_by(reason_for_absence) %>%
summarise(Frequency = n())
count_df$reason_for_absence <- as.character(count_df$reason_for_absence)
count_df$reason_for_absence <- unlist(reason_list[count_df$reason_for_absence], use.names=FALSE)
mean_count <- mean(count_df$Frequency)
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 20))
frequency_plot
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 15))
ggsave(paste0("result", "/frequency_plot.png"),
frequency_plot,
width = 15,
height = 10)
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 20))
ggsave(paste0("result", "/frequency_plot.png"),
frequency_plot,
width = 15,
height = 10)
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 17))
ggsave(paste0("result", "/frequency_plot.png"),
frequency_plot,
width = 15,
height = 10)
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 15))
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 15))
ggsave(paste0("result", "/frequency_plot.png"),
frequency_plot,
width = 15,
height = 10)
ggsave(paste0("result", "/frequency_plot.png"),
frequency_plot,
width = 20,
height = 10)
frequency_plot <- ggplot(count_df, aes(y=reorder(reason_for_absence,-Frequency), x=Frequency, fill ="red")) +
geom_col() +
geom_vline(xintercept = mean_count, color = "blue") +
ggtitle("Number of occurrences for each reason for absence")+
xlab("Number of occurrences") +
scale_x_continuous(breaks = seq(0, 120, 10), expand = expansion(mult = c(0, 0.05))) +
theme(panel.grid.major.y = element_blank(),
panel.grid.minor.y = element_blank(),
axis.title.y=element_blank(),
legend.position = "none",
plot.title = element_text(size=22),
text =  element_text(size = 18))
ggsave(paste0("result", "/frequency_plot.png"),
frequency_plot,
width = 20,
height = 10)
