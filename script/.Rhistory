reticulate::repl_python()
train_df = pd.read_feather(input_train)
from docopt import docopt
import pickle
import numpy as np
import pandas as pd
from sklearn.compose import ColumnTransformer, make_column_transformer
from sklearn.model_selection import (
RandomizedSearchCV,
cross_validate,
train_test_split,
)
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import (
OneHotEncoder,
OrdinalEncoder,
PolynomialFeatures,
StandardScaler,
)
train_df = pd.read_feather(input_train)
train_df = pd.read_feather("data/Absenteeism_at_work.csv")
train_df = pd.read_feather("result/train_df.feather")
mean_hours = train_df["Absenteeism time in hours"].mean()
sd_hours = train_df["Absenteeism time in hours"].std()
train_df = train_df[train_df["Absenteeism time in hours"] < mean_hours +3*sd_hours]
X_train, y_train = train_df.drop(columns = ["ID", "Absenteeism time in hours"]), train_df["Absenteeism time in hours"]
numeric_features = X_train.select_dtypes('number').drop(columns=["Body mass index", "Service time"]).columns.tolist()
binary_features = X_train.select_dtypes('bool').drop(columns=["Disciplinary failure"]).columns.tolist()
categorical_features = X_train.select_dtypes('category').drop(columns=["Education", "Month of absence"]).columns.tolist()
ordinal_features =['Education']
drop_features = ["ID","Disciplinary failure", "Body mass index", "Service time", "Month of absence"]
education_levels = [1,2,3,4]
numeric_transformer = make_pipeline(StandardScaler())
categorical_transformer = make_pipeline(OneHotEncoder(handle_unknown="ignore"))
binary_transformer = make_pipeline(OneHotEncoder(drop="if_binary", dtype=int))
ordinal_transformer = make_pipeline(OrdinalEncoder(categories=[education_levels], dtype=int))
preprocessor = make_column_transformer(
(numeric_transformer, numeric_features),
(categorical_transformer, categorical_features),
(binary_transformer, binary_features),
(ordinal_transformer, ordinal_features))
exit
round(2.65e-2, 3)
reticulate::repl_python()
reason_list = {
"Reason for absence":
{0: 'Others',
1: 'Health related',
2: 'Health related',
3: 'Health related',
4: 'Health related',
5: 'Health related',
6: 'Health related',
7: 'Health related',
8: 'Health related',
9: 'Health related',
10: 'Health related',
11: 'Health related',
12: 'Health related',
13: 'Health related',
14: 'Health related',
15: 'Health related',
16: 'Health related',
17: 'Health related',
18: 'Health related',
19: 'Health related',
20: 'Health related',
21: 'Health related',
22: 'Health related',
23: 'Health related',
24: 'Others',
25: 'Health related',
26: 'Others',
27: 'Health related',
28: 'Health related'}
}
train_df = train_df.replace(reason_list)
numeric_transformer = make_pipeline(StandardScaler())
categorical_transformer = make_pipeline(OneHotEncoder(handle_unknown="ignore"))
binary_transformer = make_pipeline(OneHotEncoder(drop="if_binary", dtype=int))
ordinal_transformer = make_pipeline(OrdinalEncoder(categories=[education_levels], dtype=int))
preprocessor = make_column_transformer(
(numeric_transformer, numeric_features),
(categorical_transformer, categorical_features),
(binary_transformer, binary_features),
(ordinal_transformer, ordinal_features))
reticulate::repl_python()
train_df = pd.read_feather("result/train_df.feather")
from docopt import docopt
import pickle
import numpy as np
import pandas as pd
from sklearn.compose import ColumnTransformer, make_column_transformer
from sklearn.model_selection import (
RandomizedSearchCV,
cross_validate,
train_test_split,
)
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import (
OneHotEncoder,
OrdinalEncoder,
PolynomialFeatures,
StandardScaler,
)
train_df = pd.read_feather("result/train_df.feather")
mean_hours = train_df["Absenteeism time in hours"].mean()
sd_hours = train_df["Absenteeism time in hours"].std()
train_df = train_df[train_df["Absenteeism time in hours"] < mean_hours +3*sd_hours]
X_train, y_train = train_df.drop(columns = ["ID", "Absenteeism time in hours"]), train_df["Absenteeism time in hours"]
rename_list = {
"Reason for absence":{
0: 'Unknown',
1: 'Certain infectious and parasitic diseases',
2: 'Neoplasms',
3: 'Diseases of the blood and blood-forming organs and certain disorders involving the immune mechanism',
4: 'Endocrine, nutritional and metabolic diseases',
5: 'Mental and behavioural disorders',
6: 'Diseases of the nervous system',
7: 'Diseases of the eye and adnexa',
8: 'Diseases of the ear and mastoid process',
9: 'Diseases of the circulatory system',
10: 'Diseases of the respiratory system',
11: 'Diseases of the digestive system',
12: 'Diseases of the skin and subcutaneous tissue',
13: 'Diseases of the musculoskeletal system and connective tissue',
14: 'Diseases of the genitourinary system',
15: 'Pregnancy, childbirth and the puerperium',
16: 'Certain conditions originating in the perinatal period',
17: 'Congenital malformations, deformations and chromosomal abnormalities',
18: 'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified',
19: 'Injury, poisoning and certain other consequences of external causes',
20: 'External causes of morbidity and mortality',
21: 'Factors influencing health status and contact with health services',
22: 'Patient follow-up',
23: 'Medical consultation',
24: 'Blood donation',
25: 'Laboratory examination',
26: 'Unjustified absence',
27: 'Physiotherapy',
28: 'Dental consultation'},
"Day of the week": {2: "Monday",
3: "Tuesday",
4: "Wednesday",
5: "Thursday",
6: "Friday"},
"Seasons":{1: "Summer",
2: "Autumn",
3: "Winter",
4: "Spring"}
}
train_df = train_df.replace(rename_list)
train_df['Reason for absence'] = train_df['Reason for absence'].astype('category')
train_df['Day of the week'] = train_df['Day of the week'].astype('category')
train_df['Seasons'] = train_df['Seasons'].astype('category')
train_df = pd.read_feather("result/train_df.feather")
mean_hours = train_df["Absenteeism time in hours"].mean()
sd_hours = train_df["Absenteeism time in hours"].std()
train_df = train_df[train_df["Absenteeism time in hours"] < mean_hours +3*sd_hours]
rename_list = {
"Reason for absence":{
0: 'Unknown',
1: 'Certain infectious and parasitic diseases',
2: 'Neoplasms',
3: 'Diseases of the blood and blood-forming organs and certain disorders involving the immune mechanism',
4: 'Endocrine, nutritional and metabolic diseases',
5: 'Mental and behavioural disorders',
6: 'Diseases of the nervous system',
7: 'Diseases of the eye and adnexa',
8: 'Diseases of the ear and mastoid process',
9: 'Diseases of the circulatory system',
10: 'Diseases of the respiratory system',
11: 'Diseases of the digestive system',
12: 'Diseases of the skin and subcutaneous tissue',
13: 'Diseases of the musculoskeletal system and connective tissue',
14: 'Diseases of the genitourinary system',
15: 'Pregnancy, childbirth and the puerperium',
16: 'Certain conditions originating in the perinatal period',
17: 'Congenital malformations, deformations and chromosomal abnormalities',
18: 'Symptoms, signs and abnormal clinical and laboratory findings, not elsewhere classified',
19: 'Injury, poisoning and certain other consequences of external causes',
20: 'External causes of morbidity and mortality',
21: 'Factors influencing health status and contact with health services',
22: 'Patient follow-up',
23: 'Medical consultation',
24: 'Blood donation',
25: 'Laboratory examination',
26: 'Unjustified absence',
27: 'Physiotherapy',
28: 'Dental consultation'},
"Day of the week": {2: "Monday",
3: "Tuesday",
4: "Wednesday",
5: "Thursday",
6: "Friday"},
"Seasons":{1:"Summer",
2: "Autumn",
3: "Winter",
4: "Spring"}
}
train_df = train_df.replace(rename_list)
train_df['Reason for absence'] = train_df['Reason for absence'].astype('category')
train_df['Day of the week'] = train_df['Day of the week'].astype('category')
train_df['Seasons'] = train_df['Seasons'].astype('category')
X_train, y_train = train_df.drop(columns = ["ID", "Absenteeism time in hours"]), train_df["Absenteeism time in hours"]
View(X_train)
View(X_train)
numeric_transformer = make_pipeline(StandardScaler())
categorical_transformer = make_pipeline(OneHotEncoder(handle_unknown="ignore"))
binary_transformer = make_pipeline(OneHotEncoder(drop="if_binary", dtype=int))
ordinal_transformer = make_pipeline(OrdinalEncoder(categories=[education_levels], dtype=int))
preprocessor = make_column_transformer(
(numeric_transformer, numeric_features),
(categorical_transformer, categorical_features),
(binary_transformer, binary_features),
(ordinal_transformer, ordinal_features))
numeric_features = X_train.select_dtypes('number').drop(columns=["Body mass index", "Service time"]).columns.tolist()
binary_features = X_train.select_dtypes('bool').drop(columns=["Disciplinary failure"]).columns.tolist()
categorical_features = X_train.select_dtypes('category').drop(columns=["Education", "Month of absence"]).columns.tolist()
ordinal_features =['Education']
drop_features = ["ID","Disciplinary failure", "Body mass index", "Service time", "Month of absence"]
education_levels = [1,2,3,4]
numeric_transformer = make_pipeline(StandardScaler())
categorical_transformer = make_pipeline(OneHotEncoder(handle_unknown="ignore"))
binary_transformer = make_pipeline(OneHotEncoder(drop="if_binary", dtype=int))
ordinal_transformer = make_pipeline(OrdinalEncoder(categories=[education_levels], dtype=int))
preprocessor = make_column_transformer(
(numeric_transformer, numeric_features),
(categorical_transformer, categorical_features),
(binary_transformer, binary_features),
(ordinal_transformer, ordinal_features))
from docopt import docopt
import pickle
import numpy as np
import pandas as pd
from sklearn.compose import ColumnTransformer, make_column_transformer
from sklearn.model_selection import (
RandomizedSearchCV,
cross_validate,
train_test_split,
)
from sklearn.pipeline import make_pipeline
from sklearn.preprocessing import (
OneHotEncoder,
OrdinalEncoder,
PolynomialFeatures,
StandardScaler,
)
train_df = pd.read_feather("result/processed_data/train_df.feather")
train_df = pd.read_feather("results/processed_data/train_df.feather")
