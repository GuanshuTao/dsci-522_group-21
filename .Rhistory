library(reticulate)
use_python()
use_python("/c/Users/A/miniconda3/python")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(reticulate)
repl_python()
quit
library(reticulate)
repl_python()
quit
install.packages(vegawidget)
install.packages("vegawidget")
knitr::opts_chunk$set(echo = FALSE, warning = FALSE, message = FALSE)
library(reticulate)
repl_python()
quit
library(vegawidget)
reticulate::use_condaenv(573)
reticulate::use_condaenv(573)
knitr::opts_chunk$set(echo = FALSE)
include_graphics("../script/results/correlation_matrix.png")
knitr::opts_chunk$set(echo = FALSE)
include_graphics("../script/results/correlation_matrix.png")
knitr::include_graphics("../script/results/correlation_matrix.png")
knitr::include_graphics("../script/results/distribution_plot.png")
knitr::include_graphics("../script/results/frequency_plot.png")
knitr::include_graphics("../script/results/frequency_plot.png")
knitr::opts_chunk$set(echo = FALSE)
libi
knitr::opts_chunk$set(echo = FALSE)
#' Save and load Python objects with pickle
#'
#' @param object Object to save
#' @param filename File name
#' @param pickle The implementation of pickle to use (defaults to "pickle" but
#'   could e.g. also be "cPickle")
#' @param ... Optional arguments to be passed to the `load()` function defined
#'   by the associated `pickle` module.
#'
#' @export
py_save_object <- function(object, filename, pickle = "pickle", ...) {
builtins <- import_builtins()
pickle <- import(pickle)
handle <- builtins$open(filename, "wb")
on.exit(handle$close(), add = TRUE)
pickle$dump(object, handle, protocol = pickle$HIGHEST_PROTOCOL, ...)
}
#' @rdname py_save_object
#' @export
py_load_object <- function(filename, pickle = "pickle", ...) {
builtins <- import_builtins()
pickle <- import(pickle)
handle <- builtins$open(filename, "rb")
on.exit(handle$close(), add = TRUE)
pickle$load(handle, ...)
}
knitr::opts_chunk$set(echo = FALSE)
library(feather)
non_RFE_CV_results <- read_feather("../script/results/non_RFE_CV_results.feather")
source('~/.active-rstudio-document', encoding = 'UTF-8', echo=TRUE)
non_RFE_CV_results <- read_feather("../script/results/non_RFE_CV_results.feather")
knitr::kable(non_RFE_CV_results)
non_RFE_CV_results <- read_feather("../script/results/non_RFE_CV_results.feather")
# knitr::kable(non_RFE_CV_results)
non_RFE_CV_results
RFE_CV_results <- read_feather("../script/results/RFE_CV_results.feather")
knitr::kable(RFE_CV_results)
best_coefficients <- read_feather("../script/results/best_coefficients.feather")
knitr::kable(best_coefficients)
best_coefficients <- read_feather("../script/results/best_coefficients.feather")
knitr::kable(best_coefficients)
best_coefficients <- read_feather("../script/results/best_coefficients.feather")
knitr::kable(best_coefficients)
best_coefficients
knitr::include_graphics("../script/results/frequency_plot.png")
non_RFE_CV_results <- read_feather("../script/results/non_RFE_CV_results.feather")
knitr::kable(non_RFE_CV_results)
reticulate::use_condaenv(573)
knitr::opts_chunk$set(echo = FALSE)
library(feather)
non_RFE_CV_results <- read_feather("../script/results/non_RFE_CV_results.feather")
knitr::kable(non_RFE_CV_results, caption = "Table 1. Non feature selection mean cross validation R-square scores of all three machine learning models")
RFE_CV_results <- read_feather("../script/results/RFE_CV_results.feather")
knitr::kable(RFE_CV_results, caption = "Table 2. Feature selection mean cross validation R-square scores of all three machine learning models")
best_coefficients <- read_feather("../script/results/best_coefficients.feather")
knitr::kable(best_coefficients, caption = "Table 3. Most important Features selected with associated coefficients under ridge regressor prediction model")
install.packages("pandoc")
